name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Frontend Build and Test
  frontend-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test -- --coverage --watchAll=false

      - name: Build frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: dist/

  # Backend Build and Test
  backend-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [
            api-gateway,
            user-service,
            order-service,
            routing-service,
            geolocation-service,
            notification-service,
          ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: logi-core/package-lock.json

      - name: Install root dependencies
        run: npm ci --workspaces=false
        working-directory: ./logi-core

      - name: Install service dependencies
        run: |
          if [ -d "logi-core/apps/${{ matrix.service }}" ]; then
            cd logi-core/apps/${{ matrix.service }}
          else
            cd logi-core/services/${{ matrix.service }}
          fi
          npm ci

      - name: Run TypeScript check
        run: |
          if [ -d "logi-core/apps/${{ matrix.service }}" ]; then
            cd logi-core/apps/${{ matrix.service }}
          else
            cd logi-core/services/${{ matrix.service }}
          fi
          npx tsc --noEmit

  # Python Services Test
  python-services-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install inventory service dependencies
        run: |
          cd logi-core/services/inventory-service
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test inventory service
        run: |
          cd logi-core/services/inventory-service
          python -m pytest --cov=. --cov-report=xml || echo "No tests found"

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Images
  build-and-push:
    needs: [frontend-test, backend-test, python-services-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        include:
          - service: frontend
            context: .
            dockerfile: Dockerfile
          - service: api-gateway
            context: logi-core/apps/api-gateway
            dockerfile: logi-core/apps/api-gateway/Dockerfile
          - service: user-service
            context: logi-core/services/user-service
            dockerfile: logi-core/services/user-service/Dockerfile
          - service: inventory-service
            context: logi-core/services/inventory-service
            dockerfile: logi-core/services/inventory-service/Dockerfile
          - service: order-service
            context: logi-core/services/order-service
            dockerfile: logi-core/services/order-service/Dockerfile
          - service: routing-service
            context: logi-core/services/routing-service
            dockerfile: logi-core/services/routing-service/Dockerfile
          - service: geolocation-service
            context: logi-core/services/geolocation-service
            dockerfile: logi-core/services/geolocation-service/Dockerfile
          - service: notification-service
            context: logi-core/services/notification-service
            dockerfile: logi-core/services/notification-service/Dockerfile

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Development
  deploy-dev:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_DEV }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to development
        run: |
          export KUBECONFIG=kubeconfig
          cd logi-core/k8s
          kubectl apply -k overlays/dev
          kubectl rollout status deployment/frontend -n logi-core-dev
          kubectl rollout status deployment/api-gateway -n logi-core-dev

      - name: Run smoke tests
        run: |
          export KUBECONFIG=kubeconfig
          # Wait for services to be ready
          kubectl wait --for=condition=ready pod -l app=frontend -n logi-core-dev --timeout=300s
          kubectl wait --for=condition=ready pod -l app=api-gateway -n logi-core-dev --timeout=300s

          # Get service URL and run basic health checks
          FRONTEND_URL=$(kubectl get svc frontend -n logi-core-dev -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -n "$FRONTEND_URL" ]; then
            curl -f http://$FRONTEND_URL/health || echo "Frontend health check failed"
          fi

  # Deploy to Production
  deploy-prod:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to production
        run: |
          export KUBECONFIG=kubeconfig
          cd logi-core/k8s
          kubectl apply -k overlays/prod
          kubectl rollout status deployment/frontend -n logi-core-prod
          kubectl rollout status deployment/api-gateway -n logi-core-prod

      - name: Run production smoke tests
        run: |
          export KUBECONFIG=kubeconfig
          # Wait for services to be ready
          kubectl wait --for=condition=ready pod -l app=frontend -n logi-core-prod --timeout=300s
          kubectl wait --for=condition=ready pod -l app=api-gateway -n logi-core-prod --timeout=300s

          # Run comprehensive health checks
          FRONTEND_URL=$(kubectl get svc frontend -n logi-core-prod -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -n "$FRONTEND_URL" ]; then
            curl -f http://$FRONTEND_URL/health || echo "Frontend health check failed"
          fi

  # Notify deployment status
  notify:
    needs: [deploy-dev, deploy-prod]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
