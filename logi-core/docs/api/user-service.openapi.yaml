openapi: 3.0.3
info:
  title: LogiCore User Service API
  description: Enhanced user management service with RBAC, authentication, and comprehensive user operations
  version: 1.0.0
  contact:
    name: LogiCore API Team
    email: api@logicore.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:4001
    description: Development server
  - url: https://api-dev.logicore.com
    description: Development environment
  - url: https://api.logicore.com
    description: Production environment

security:
  - BearerAuth: []

tags:
  - name: Users
    description: User management operations
  - name: Health
    description: Service health and monitoring
  - name: Admin
    description: Administrative operations

paths:
  /users/health:
    get:
      tags: [Health]
      summary: Service health check
      description: Returns service health status including database connectivity
      security: []
      responses:
        200:
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /users/stats:
    get:
      tags: [Admin]
      summary: Get user statistics
      description: Returns comprehensive user statistics (admin/manager only)
      security:
        - BearerAuth: []
      responses:
        200:
          description: User statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatsResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

  /users/search:
    get:
      tags: [Users]
      summary: Search users
      description: Search users by email, first name, or last name
      security:
        - BearerAuth: []
      parameters:
        - name: q
          in: query
          required: true
          description: Search query (minimum 2 characters)
          schema:
            type: string
            minLength: 2
        - name: limit
          in: query
          required: false
          description: Maximum number of results
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      responses:
        200:
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSearchResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

  /users/role/{role}:
    get:
      tags: [Users]
      summary: Get users by role
      description: Retrieve all users with a specific role
      security:
        - BearerAuth: []
      parameters:
        - name: role
          in: path
          required: true
          description: User role to filter by
          schema:
            type: string
            enum: [admin, manager, driver, dispatcher, customer, user]
      responses:
        200:
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

  /users:
    get:
      tags: [Users]
      summary: List users
      description: Retrieve paginated list of users
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          required: false
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          required: false
          description: Number of users per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: active
          in: query
          required: false
          description: Filter by active status
          schema:
            type: string
            enum: [true, false]
      responses:
        200:
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'

    post:
      tags: [Users]
      summary: Create new user
      description: Create a new user account (admin/manager only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        409:
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      tags: [Users]
      summary: Get user by ID
      description: Retrieve user details by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Users]
      summary: Update user
      description: Update user details
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [Users]
      summary: Delete user
      description: Delete user account (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

  /users/{id}/roles:
    put:
      tags: [Users]
      summary: Update user roles
      description: Update user roles and permissions (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roles:
                  type: array
                  items:
                    type: string
                    enum: [admin, manager, driver, dispatcher, customer, user]
                  minItems: 1
                  example: ["manager", "dispatcher"]
              required: [roles]
      responses:
        200:
          description: User roles updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

  /users/{id}/password:
    put:
      tags: [Users]
      summary: Change user password
      description: Change user password
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  minLength: 8
                  example: "newSecurePassword123"
              required: [newPassword]
      responses:
        200:
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        roles:
          type: array
          items:
            type: string
            enum: [admin, manager, driver, dispatcher, customer, user]
          example: ["manager", "dispatcher"]
        permissions:
          type: array
          items:
            type: string
          example: ["read", "write", "manage_team"]
        is_active:
          type: boolean
          example: true
        email_verified:
          type: boolean
          example: true
        last_login:
          type: string
          format: date-time
          nullable: true
          example: "2024-01-15T10:30:00Z"
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    CreateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "newuser@example.com"
        password:
          type: string
          minLength: 8
          example: "securePassword123"
        first_name:
          type: string
          minLength: 1
          example: "Jane"
        last_name:
          type: string
          minLength: 1
          example: "Smith"
        roles:
          type: array
          items:
            type: string
            enum: [admin, manager, driver, dispatcher, customer, user]
          default: ["user"]
          example: ["customer"]
      required: [email, password, first_name, last_name]

    UpdateUserRequest:
      type: object
      properties:
        first_name:
          type: string
          minLength: 1
          example: "Jane"
        last_name:
          type: string
          minLength: 1
          example: "Smith"
        roles:
          type: array
          items:
            type: string
            enum: [admin, manager, driver, dispatcher, customer, user]
          example: ["manager"]
        is_active:
          type: boolean
          example: true

    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
        message:
          type: string
          example: "Operation completed successfully"
        error:
          type: string
          example: "Error message"
        meta:
          type: object

    UserResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/User'

    UserListResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/User'

    PaginatedUserResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/User'
            meta:
              type: object
              properties:
                page:
                  type: integer
                  example: 1
                limit:
                  type: integer
                  example: 50
                total:
                  type: integer
                  example: 150
                pages:
                  type: integer
                  example: 3

    UserSearchResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/User'
            meta:
              type: object
              properties:
                count:
                  type: integer
                  example: 5

    UserStatsResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                totalUsers:
                  type: integer
                  example: 150
                activeUsers:
                  type: integer
                  example: 142
                verifiedUsers:
                  type: integer
                  example: 135
                roleDistribution:
                  type: object
                  additionalProperties:
                    type: integer
                  example:
                    admin: 2
                    manager: 8
                    driver: 45
                    dispatcher: 12
                    customer: 75
                    user: 8

    HealthResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                status:
                  type: string
                  example: "ok"
                database:
                  type: object
                  properties:
                    status:
                      type: string
                      example: "healthy"
                    details:
                      type: object
                timestamp:
                  type: string
                  format: date-time

    SuccessResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            success:
              type: boolean
              example: true
            message:
              type: string
              example: "Operation completed successfully"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "Error message"
        message:
          type: string
          example: "Detailed error description"

  responses:
    BadRequest:
      description: Bad request - invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Unauthorized - authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Not found - resource doesn't exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'