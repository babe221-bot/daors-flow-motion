version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '80:80'
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:8080
    depends_on:
      - api-gateway
    networks:
      - flow-motion-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # API Gateway
  api-gateway:
    build:
      context: ./logi-core/apps/api-gateway
      dockerfile: Dockerfile
    ports:
      - '8080:8080'
    environment:
      - NODE_ENV=development
      - PORT=8080
      - JWT_SECRET=dev-secret-key
      - USER_SERVICE_URL=http://user-service:4001
      - INVENTORY_SERVICE_URL=http://inventory-service:8000
      - ORDER_SERVICE_URL=http://order-service:4003
      - ROUTING_SERVICE_URL=http://routing-service:4004
      - GEO_SERVICE_URL=http://geolocation-service:4005
      - NOTIFY_SERVICE_URL=http://notification-service:4006
    depends_on:
      - user-service
      - inventory-service
      - order-service
      - routing-service
      - geolocation-service
      - notification-service
    networks:
      - flow-motion-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # User Service
  user-service:
    build:
      context: ./logi-core/services/user-service
      dockerfile: Dockerfile
    ports:
      - '4001:4001'
    environment:
      - NODE_ENV=development
      - PORT=4001
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/logicore
    depends_on:
      - postgres
    networks:
      - flow-motion-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4001/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Inventory Service (Python FastAPI)
  inventory-service:
    build:
      context: ./logi-core/services/inventory-service
      dockerfile: Dockerfile
    ports:
      - '8000:8000'
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/logicore
    depends_on:
      - postgres
    networks:
      - flow-motion-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Order Service
  order-service:
    build:
      context: ./logi-core/services/order-service
      dockerfile: Dockerfile
    ports:
      - '4003:4003'
    environment:
      - NODE_ENV=development
      - PORT=4003
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/logicore
    depends_on:
      - postgres
    networks:
      - flow-motion-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4003/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Routing Service
  routing-service:
    build:
      context: ./logi-core/services/routing-service
      dockerfile: Dockerfile
    ports:
      - '4004:4004'
    environment:
      - NODE_ENV=development
      - PORT=4004
    networks:
      - flow-motion-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4004/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Geolocation Service
  geolocation-service:
    build:
      context: ./logi-core/services/geolocation-service
      dockerfile: Dockerfile
    ports:
      - '4005:4005'
    environment:
      - NODE_ENV=development
      - PORT=4005
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/logicore
    depends_on:
      - postgres
    networks:
      - flow-motion-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4005/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Notification Service
  notification-service:
    build:
      context: ./logi-core/services/notification-service
      dockerfile: Dockerfile
    ports:
      - '4006:4006'
    environment:
      - NODE_ENV=development
      - PORT=4006
    networks:
      - flow-motion-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4006/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_DB=logicore
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/sample-data.sql:/docker-entrypoint-initdb.d/02-sample-data.sql
    networks:
      - flow-motion-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - flow-motion-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx Load Balancer (optional for testing)
  nginx-lb:
    image: nginx:alpine
    ports:
      - '8090:80'
    volumes:
      - ./nginx-lb.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - api-gateway
    networks:
      - flow-motion-network
    profiles:
      - load-balancer

volumes:
  postgres_data:
  redis_data:

networks:
  flow-motion-network:
    driver: bridge
