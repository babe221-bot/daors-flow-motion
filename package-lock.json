import { useState, useEffect, useCallback } from "react";
import { Navigate } from "react-router-dom";
import { 
  Truck, 
  DollarSign, 
  Clock, 
  Shield,
  MapPin,
  Globe,
  RefreshCw
} from "lucide-react";
import Navbar from "@/components/Navbar";
import Sidebar from "@/components/Sidebar";
import MetricCard from "@/components/MetricCard";
import AnimatedChart from "@/components/AnimatedChart";
import VideoBackground from "@/components/VideoBackground";
import AlertsPanel from "@/components/AlertsPanel";
import EnhancedFeatures from "@/components/EnhancedFeatures";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { cn } from "@/lib/utils";
import { getMetricData, getShipmentData, getRevenueData, getRouteData } from "@/lib/api";
import { MetricData, ChartData } from "@/lib/types";
import Chatbot from "@/components/Chatbot";
import { useTranslation } from "react-i18next";
import { startGpsSimulation, stopGpsSimulation, getVehicles, getRoutes } from "@/lib/gps-simulator";
import { Vehicle } from "@/components/MapView";

const Index = () => {
  const { t } = useTranslation();
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [metricData, setMetricData] = useState<MetricData | null>(null);
  const [shipmentData, setShipmentData] = useState<ChartData | null>(null);
  const [revenueData, setRevenueData] = useState<ChartData | null>(null);
  const [routeData, setRouteData] = useState<ChartData | null>(null);
  const [liveVehicles, setLiveVehicles] = useState<Vehicle[]>(getVehicles());
  const [liveUpdates, setLiveUpdates] = useState(true);
  const [updatedItems, setUpdatedItems] = useState<Set<string>>(new Set());
  const staticRoutes = getRoutes();

  // Simulate login and fetch data
  useEffect(() => {
    const timer = setTimeout(() => setIsAuthenticated(true), 2000);
    
    const fetchData = async () => {
      try {
        const [metrics, shipments, revenue, routes] = await Promise.all([
          getMetricData(),
          getShipmentData(),
          getRevenueData(),
          getRouteData()
        ]);
        
        setMetricData(metrics);
        setShipmentData(shipments);
        setRevenueData(revenue);
        setRouteData(routes);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };

    if (isAuthenticated) {
      fetchData();
    }

    return () => clearTimeout(timer);
  }, [isAuthenticated]);

  // Start/stop GPS simulation based on liveUpdates toggle
  useEffect(() => {
    if (liveUpdates) {
      const stop = startGpsSimulation(setLiveVehicles);
      return stop;
    } else {
      stopGpsSimulation();
    }
  }, [liveUpdates]);

  // Simulate real-time data updates
  const simulateRealTimeUpdates = useCallback(() => {
    if (!metricData || !shipmentData || !revenueData || !routeData) return;
    
    const updated = new Set<string>();
    
    // Update metrics with small random fluctuations
    const newMetricData = { ...metricData };
    newMetricData.activeShipments += Math.floor(Math.random() * 5 - 2);
    newMetricData.totalRevenue += Math.floor(Math.random() * 1000 - 300);
    newMetricData.onTimeDelivery = Math.min(100, 
      Math.max(85, newMetricData.onTimeDelivery + (Math.random() - 0.5))
    );
    newMetricData.borderCrossings += Math.floor(Math.random() * 3 - 1);
    
    setMetricData(newMetricData);
    updated.add('activeShipments');
    updated.add('totalRevenue');
    updated.add('onTimeDelivery');
    updated.add('borderCrossings');
    
    // Update shipment data
    const newShipmentData = shipmentData.map(item => ({
      ...item,
      value: Math.max(10, item.value + Math.floor(Math.random() * 5 - 2))
    }));
    setShipmentData(newShipmentData);
    updated.add('shipmentStatus');
    
    // Update revenue data
    const newRevenueData = revenueData.map((item, i) => ({
      ...item,
      value: i === revenueData.length - 1 
        ? Math.max(50, item.value + Math.floor(Math.random() * 10 - 3))
        : item.value
    }));
    setRevenueData(newRevenueData);
    updated.add('revenueTrend');
    
    // Update route data
    const newRouteData = routeData.map(item => ({
      ...item,
      value: Math.max(5, item.value + Math.floor(Math.random() * 3 - 1))
    }));
    setRouteData(newRouteData);
    updated.add('popularRoutes');
    
    // Update vehicle status randomly
    setLiveVehicles(prev => {
      return prev.map(vehicle => {
        if (Math.random() > 0.7) {
          const newStatus = 
            vehicle.status === "Finished" ? "Finished" : 
            Math.random() > 0.8 ? "Delayed" : "On Time";
          return { ...vehicle, status: newStatus };
        }
        return vehicle;
      });
    });
    
    // Highlight updated items
    setUpdatedItems(updated);
    setTimeout(() => setUpdatedItems(new Set()), 1000);
  }, [metricData, shipmentData, revenueData, routeData]);

  // Set up real-time simulation interval
  useEffect(() => {
    let intervalId: NodeJS.Timeout;
    
    if (liveUpdates) {
      intervalId = setInterval(simulateRealTimeUpdates, 5000);
    }
    
    return () => {
      if (intervalId) clearInterval(intervalId);
    };
  }, [liveUpdates, simulateRealTimeUpdates]);

  if (!isAuthenticated) {
    return <Navigate to="/login" />;
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "On Time": return "bg-primary text-primary-foreground";
      case "Finished": return "bg-success text-success-foreground";
      case "Delayed": return "bg-destructive text-destructive-foreground";
      default: return "bg-muted text-muted-foreground";
    }
  };

  const generateHistoricalData = (baseValue: number, days = 30) => {
    return Array.from({ length: days }, (_, i) => ({
      label: `Dan ${i + 1}`,
      value: baseValue + (Math.random() - 0.5) * baseValue * 0.2 + i * Math.random() * 2,
      color: 'bg-primary'
    }));
  };

  const isUpdated = (id: string) => updatedItems.has(id);

  return (
    <div className="min-h-screen bg-background relative overflow-hidden">
      <VideoBackground videoSrc="https://www.w3schools.com/html/mov_bbb.mp4" />
      <div className="absolute inset-0 bg-gradient-to-br from-background/90 via-background/80 to-background/90 z-10" />
      
      <div className="relative z-20">
        <Navbar 
          onToggleSidebar={() => setSidebarOpen(!sidebarOpen)} 
          sidebarOpen={sidebarOpen} 
        />
        
        <Sidebar 
          isOpen={sidebarOpen} 
        />
        
        <main className={cn("transition-all duration-300 pt-header", sidebarOpen ? "ml-64" : "ml-16")}>
          <div className="p-6 space-y-6">
            <div className="flex justify-between items-start">
              <div className="space-y-2 animate-slide-up-fade">
                <h1 className="text-3xl font-bold gradient-text">{t('index.title')}</h1>
                <p className="text-muted-foreground">{t('index.description')}</p>
              </div>
              
              <Button 
                variant={liveUpdates ? "default" : "secondary"}
                onClick={() => setLiveUpdates(!liveUpdates)}
                className="flex items-center gap-2 animate-slide-up-fade"
              >
                <RefreshCw className={cn("h-4 w-4", liveUpdates && "animate-spin")} />
                {liveUpdates ? t('index.liveOn') : t('index.liveOff')}
              </Button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <Dialog>
                <DialogTrigger asChild>
                  <div className={cn(
                    "transition-all duration-500 rounded-xl",
                    isUpdated('activeShipments') && "ring-2 ring-blue-500 bg-blue-500/10"
                  )}>
                    <MetricCard 
                      title={t('index.activeShipments')} 
                      value={metricData?.activeShipments || 0} 
                      change={t('index.activeShipments.change')} 
                      changeType="positive" 
                      icon={Truck} 
                      delay={100} 
                    />
                  </div>
                </DialogTrigger>
                <DialogContent className="glass">
                  <DialogHeader>
                    <DialogTitle>{t('index.historicalDataFor')}: {t('index.activeShipments')}</DialogTitle>
                  </DialogHeader>
                  <AnimatedChart title={t('index.last30days')} data={generateHistoricalData(478)} type="line" />
                </DialogContent>
              </Dialog>

              <Dialog>
                <DialogTrigger asChild>
                  <div className={cn(
                    "transition-all duration-500 rounded-xl",
                    isUpdated('totalRevenue') && "ring-2 ring-blue-500 bg-blue-500/10"
                  )}>
                    <MetricCard 
                      title={t('index.totalRevenue')} 
                      value={metricData?.totalRevenue || 0} 
                      change={t('index.totalRevenue.change')} 
                      changeType="positive" 
                      icon={DollarSign} 
                      delay={200} 
                      currency="â‚¬" 
                    />
                  </div>
                </DialogTrigger>
                <DialogContent className="glass">
                  <DialogHeader>
                    <DialogTitle>{t('index.historicalDataFor')}: {t('index.totalRevenue')}</DialogTitle>
                  </DialogHeader>
                  <AnimatedChart title={t('index.last30days')} data={generateHistoricalData(125840)} type="line" />
                </DialogContent>
              </Dialog>

              <Dialog>
                <DialogTrigger asChild>
                  <div className={cn(
                    "transition-all duration-500 rounded-xl",
                    isUpdated('onTimeDelivery') && "ring-2 ring-blue-500 bg-blue-500/10"
                  )}>
                    <MetricCard 
                      title={t('index.onTimeDelivery')} 
                      value={metricData?.onTimeDelivery || 0} 
                      change={t('index.onTimeDelivery.change')} 
                      changeType="positive" 
                      icon={Clock} 
                      delay={300} 
                      currency="%" 
                    />
                  </div>
                </DialogTrigger>
                <DialogContent className="glass">
                  <DialogHeader>
                    <DialogTitle>{t('index.historicalDataFor')}: {t('index.onTimeDelivery')}</DialogTitle>
                  </DialogHeader>
                  <AnimatedChart title={t('index.last30days')} data={generateHistoricalData(94.8)} type="line" />
                </DialogContent>
              </Dialog>

              <Dialog>
                <DialogTrigger asChild>
                  <div className={cn(
                    "transition-all duration-500 rounded-xl",
                    isUpdated('borderCrossings') && "ring-2 ring-blue-500 bg-blue-500/10"
                  )}>
                    <MetricCard 
                      title={t('index.borderCrossings')} 
                      value={metricData?.borderCrossings || 0} 
                      change={t('index.borderCrossings.change')} 
                      changeType="neutral" 
                      icon={Shield} 
                      delay={400} 
                    />
                  </div>
                </DialogTrigger>
                <DialogContent className="glass">
                  <DialogHeader>
                    <DialogTitle>{t('index.historicalDataFor')}: {t('index.borderCrossings')}</DialogTitle>
                  </DialogHeader>
                  <AnimatedChart title={t('index.last30days')} data={generateHistoricalData(1247)} type="line" />
                </DialogContent>
              </Dialog>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
              <div className={cn(
                "transition-all duration-500 rounded-xl",
                isUpdated('shipmentStatus') && "ring-2 ring-blue-500 bg-blue-500/10"
              )}>
                <AnimatedChart 
                  title={t('index.shipmentStatusDistribution')} 
                  data={shipmentData || []} 
                  type="donut" 
                  delay={500} 
                />
              </div>
              
              <div className={cn(
                "transition-all duration-500 rounded-xl",
                isUpdated('revenueTrend') && "ring-2 ring-blue-500 bg-blue-500/10"
              )}>
                <AnimatedChart 
                  title={t('index.monthlyRevenueTrend')} 
                  data={revenueData || []} 
                  type="line" 
                  delay={600} 
                />
              </div>
              
              <div className={cn(
                "transition-all duration-500 rounded-xl",
                isUpdated('popularRoutes') && "ring-2 ring-blue-500 bg-blue-500/10"
              )}>
                <AnimatedChart 
                  title={t('index.popularTradeRoutes')} 
                  data={routeData || []} 
                  type="bar" 
                  delay={700} 
                />
              </div>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card className={cn(
                "glass hover-lift transition-all duration-300 animate-slide-up-fade",
                isUpdated('liveRoutes') && "ring-2 ring-blue-500 bg-blue-500/10"
              )} style={{ animationDelay: "800ms" }}>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <MapPin className="h-5 w-5 text-primary" /> {t('index.liveRouteTracking')}
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {liveVehicles.map((vehicle, index) => {
                    const routeInfo = staticRoutes.find(r => r.id === vehicle.id);
                    if (!routeInfo) return null;

                    const from = routeInfo.path[0];
                    const to = routeInfo.path[routeInfo.path.length - 1];
                    // A real app would have city names, here we just show coordinates
                    const fromLabel = `[${from[0].toFixed(2)}, ${from[1].toFixed(2)}]`;
                    const toLabel = `[${to[0].toFixed(2)}, ${to[1].toFixed(2)}]`;

                    // Mock progress and ETA for demonstration
                    const progress = vehicle.status === 'Finished' ? 100 : Math.floor(Math.random() * 80) + 10;
                    const eta = vehicle.status === 'Finished' ? 'Delivered' : `${Math.floor(Math.random() * 5)}h ${Math.floor(Math.random() * 59)}m`;

                    return (
                      <div 
                        key={vehicle.id} 
                        className="p-3 rounded-lg border border-border/50 bg-gradient-card hover-lift transition-all duration-200" 
                        style={{ animationDelay: `${900 + index * 100}ms` }}
                      >
                        <div className="flex items-center justify-between mb-2">
                          <div className="flex items-center gap-2">
                            <Badge className={getStatusColor(vehicle.status)}>{vehicle.status}</Badge>
                            <span className="font-medium text-sm">{vehicle.id}</span>
                          </div>
                          <span className="text-sm text-muted-foreground">{eta}</span>
                        </div>
                        <div className="flex items-center justify-between text-sm mb-2">
                          <span>{fromLabel} â†’ {toLabel}</span>
                          <span className="text-muted-foreground">{t('route.driver')}: {vehicle.driver}</span>
                        </div>
                        <div className="space-y-1">
                          <div className="flex justify-between text-xs">
                            <span>{t('route.progress')}</span>
                            <span>{progress}%</span>
                          </div>
                          <div className="h-2 bg-muted rounded-full overflow-hidden">
                            <div className="h-full bg-gradient-primary rounded-full transition-all duration-1000 ease-out" style={{ width: `${progress}%` }} />
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </CardContent>
              </Card>
              <div className="animate-slide-up-fade" style={{ animationDelay: "900ms" }}>
                <AlertsPanel />
              </div>
            </div>

            <Card className="glass hover-lift transition-all duration-300 animate-slide-up-fade" style={{ animationDelay: "1000ms" }}>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Globe className="h-5 w-5 text-primary" /> {t('index.westernBalkanTradeOverview')}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div className="text-center space-y-2">
                    <div className="text-2xl font-bold text-primary">7</div>
                    <div className="text-sm text-muted-foreground">{t('index.ceftaCountries')}</div>
                    <div className="text-xs text-muted-foreground">{t('index.ceftaCountries.list')}</div>
                  </div>
                  <div className="text-center space-y-2">
                    <div className="text-2xl font-bold text-success">â‚¬2.8B</div>
                    <div className="text-sm text-muted-foreground">{t('index.annualTradeVolume')}</div>
                    <div className="text-xs text-muted-foreground">{t('index.annualTradeVolume.description')}</div>
                  </div>
                  <div className="text-center space-y-2">
                    <div className="text-2xl font-bold text-warning">145</div>
                    <div className="text-sm text-muted-foreground">{t('index.borderCrossings.count')}</div>
                    <div className="text-xs text-muted-foreground">{t('index.borderCrossings.description')}</div>
                  </div>
                </div>
              </CardContent>
            </Card>

            <div className="mt-8">
              <EnhancedFeatures />
            </div>
          </div>
        </main>
        <Chatbot />
      </div>
    </div>
  );
};

export default Index;